const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let state = {
    coins: 0,
    happiness: 100,
    hunger: 100,
    baseLevel: 1,
    clickPower: 1,
    autoIncome: 0,
    floppaState: 'idle',
    lastTick: Date.now(),
    location: 'home',
    boxCooldown: 0,
    items: {
        goldenFloppa: false,
        megaClicker: false,
        happinessBooster: false,
        maid: false,
        poorClicker: false
    },
    // New properties for the key/boss/artifact system
    hasKey: false,
    strangeLocationUnlocked: false,
    bossDefeated: false,
    artifacts: []
};

const sprites = {
    floppa: {
        idle: new Image(),
        happy: new Image(),
        sad: new Image()
    },
    backgrounds: {
        home: new Image(),
        park: new Image(),
        shop: new Image(),
        artifact: new Image()
    },
    base: [
        new Image(),
        new Image(),
        new Image(),
        new Image(),
        new Image()
    ],
    player: new Image(),
    boss: new Image()
};

document.getElementById('location').textContent =
    state.location === 'home' ? '–î–æ–º' :
    state.location === 'park' ? '–ü–∞—Ä–∫' :
    state.location === 'shop' ? '–ú–∞–≥–∞–∑–∏–Ω' :
    state.location === 'strange' ? '–°—Ç—Ä–∞–Ω–Ω–∞—è –õ–æ–∫–∞—Ü–∏—è' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤
sprites.floppa.idle.src = 'https://cdn.comic.studio/images/raiseafloppacomics/characters/b9baa8a6236f0537ebd59fd41ef0a624.png?filename=Pet_floppa_1.png';
sprites.floppa.happy.src = sprites.floppa.idle.src;
sprites.floppa.sad.src = sprites.floppa.idle.src;
sprites.backgrounds.home.src = 'https://cdn.comic.studio/images/raiseafloppacomics/backgrounds/8a63ed99b058549be44e2c950ce40d61.png?filename=Interior.png';
sprites.backgrounds.park.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-YklwnKnnUAA9HvORD5CazphLSIus-rUAvA&s';
sprites.backgrounds.shop.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTepmNfB1WWwmiIOBYjVCpmA0KB_-AKA2O86Q&s';
sprites.backgrounds.artifact.src = 'cheese burger.webp';
sprites.player.src = 'Pet_floppa.webp';
sprites.boss.src = 'Stupid_Bingus.webp';

function playSound(soundId) {
    document.getElementById(soundId).play();
}

function draw() {
    ctx.fillStyle = '#87CEEB';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(sprites.backgrounds[state.location], 0, 0, canvas.width, canvas.height);
    
    if (state.location === 'home') {
        const baseImg = sprites.base[Math.min(state.baseLevel - 1, 4)];
        ctx.drawImage(baseImg, canvas.width/2 - 150, canvas.height - 200, 300, 150);
    }

    if (state.location === 'artifact') {
        ctx.font = '32px Comic Sans MS';
        ctx.fillStyle = '#fff';
        ctx.textAlign = 'center';
        ctx.fillText('–ê–ª—Ç–∞—Ä—å –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', canvas.width/2, 100);
        // –¢—Ä–∏ —Ç–∞–±–ª–∏—á–∫–∏ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
        const artifactsPool = ["–°–∏–ª–∞ –∫–ª–∏–∫–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ"];
        for (let i = 0; i < 3; i++) {
            ctx.fillStyle = '#222';
            ctx.fillRect(canvas.width/2 - 250 + i*200, 200, 150, 150);
            ctx.fillStyle = '#ffd700';
            ctx.font = '20px Comic Sans MS';
            ctx.fillText(artifactsPool[i], canvas.width/2 - 175 + i*200, 280);
        }
        // –¢–∞–±–ª–∏—á–∫–∞ –¥–æ–º–æ–π
        ctx.fillStyle = '#444';
        ctx.fillRect(canvas.width/2 - 75, 400, 150, 80);
        ctx.fillStyle = '#fff';
        ctx.font = '24px Comic Sans MS';
        ctx.fillText('–î–æ–º–æ–π', canvas.width/2, 450);
    }

    const floppaSprite = sprites.floppa[state.floppaState] || sprites.floppa.idle;
    ctx.drawImage(floppaSprite, canvas.width/2 - 75, canvas.height/2 - 75, 150, 150);
}

function updateUI() {
    document.getElementById('coins').textContent = Math.floor(state.coins).toLocaleString();
    document.getElementById('happiness').textContent = Math.floor(state.happiness);
    document.getElementById('hunger').textContent = Math.floor(state.hunger);
    document.getElementById('baseLevel').textContent = state.baseLevel;
    document.getElementById('autoIncome').textContent = (state.autoIncome * (state.happiness / 100)).toFixed(1);
    document.getElementById('location').textContent =
        state.location === 'home' ? '–î–æ–º' :
        state.location === 'park' ? '–ü–∞—Ä–∫' :
        state.location === 'shop' ? '–ú–∞–≥–∞–∑–∏–Ω' : '–°—Ç—Ä–∞–Ω–Ω–∞—è –õ–æ–∫–∞—Ü–∏—è';

    document.getElementById('itemsStatus').innerHTML = `
        –ó–æ–ª–æ—Ç–∞—è –§–ª–æ–ø–ø–∞: ${state.items.goldenFloppa ? '‚úÖ' : '‚ùå'}<br>
        –ú–µ–≥–∞-–ö–ª–∏–∫–µ—Ä: ${state.items.megaClicker ? '‚úÖ' : '‚ùå'}<br>
        –£—Å–∏–ª–∏—Ç–µ–ª—å –°—á–∞—Å—Ç—å—è: ${state.items.happinessBooster ? '‚úÖ' : '‚ùå'}<br>
        –ì–æ—Ä–Ω–∏—á–Ω–∞—è: ${state.items.maid ? '‚úÖ' : '‚ùå'}
        –±–µ–¥–Ω—ã–π-–ö–ª–∏–∫–µ—Ä: ${state.items.poorClicker ? '‚úÖ' : '‚ùå'}<br>
        –ö–ª—é—á: ${state.hasKey ? 'üîë' : '‚ùå'}<br>
        –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${state.artifacts.join(", ") || "–ù–µ—Ç"}
    `;
}

function getBaseUpgradeCost() {
    return 100 * Math.pow(2, state.baseLevel - 1);
}

function upgradeBase() {
    const cost = getBaseUpgradeCost();
    if (state.coins >= cost && state.baseLevel < 5) {
        state.coins -= cost;
        state.baseLevel += 1;
        state.autoIncome = state.baseLevel * 0.2;
        playSound('buySound');
    } else {
        playSound('errorSound');
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
}

function enterStrangeLocation() {
    state.hasKey = false;
    startBossFight();
}

function startBossFight() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∏ –≤–∫–ª—é—á–∞–µ–º –º—É–∑—ã–∫—É –±–æ—Å—Å–∞
    try {
        const homeMusic = document.getElementById('home');
        const bossMusic = document.getElementById('bossMusic');
        if (homeMusic) {
            homeMusic.pause();
            homeMusic.currentTime = 0;
        }
        if (bossMusic) {
            bossMusic.currentTime = 0;
            bossMusic.play();
        }
    } catch(e) {}
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π canvas
    const mainCanvas = canvas;
    const mainCtx = ctx;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π canvas –¥–ª—è –º–∏–Ω–∏-–∏–≥—Ä—ã
    const gameCanvas = document.createElement('canvas');
    gameCanvas.width = 800;
    gameCanvas.height = 600;
    gameCanvas.style.position = 'fixed';
    gameCanvas.style.top = '50%';
    gameCanvas.style.left = '50%';
    gameCanvas.style.transform = 'translate(-50%, -50%)';
    gameCanvas.style.border = '2px solid #333';
    gameCanvas.style.backgroundColor = '#111';
    document.body.appendChild(gameCanvas);
    
    const gameCtx = gameCanvas.getContext('2d');
    
    // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let score = 0;
    let gameOver = false;
    let cubes = [];
    let player = {
        x: gameCanvas.width / 2 - 25,
        y: gameCanvas.height - 50,
        width: 50,
        height: 50,
        speed: 5,
        sprite: sprites.player
    };

    let boss = {
        x: gameCanvas.width / 2 - 40,
        y: 50,
        width: 80,
        height: 80,
        health: 400,
        maxHealth: 400,
        color: '#ff0000',
        direction: 1,
        speed: 2,
        sprite: sprites.boss
    };

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    let keys = {
        ArrowLeft: false,
        ArrowRight: false
    };

    function handleKeyDown(e) {
        if (keys.hasOwnProperty(e.key)) {
            keys[e.key] = true;
        }
    }

    function handleKeyUp(e) {
        if (keys.hasOwnProperty(e.key)) {
            keys[e.key] = false;
        }
    }

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    function createFallingObject() {
        // 20% —à–∞–Ω—Å –Ω–∞ –ø–µ–ª—å–º–µ—à–∫—É
        if (Math.random() < 0.2) {
            return {
                type: 'pelmeshka',
                x: Math.random() * (gameCanvas.width - 30),
                y: -30,
                width: 30,
                height: 30,
                speed: 3 + Math.random() * 2,
                color: '#fffbe6',
                border: '#c2a76d'
            };
        } else {
            return {
                type: 'cube',
                x: Math.random() * (gameCanvas.width - 30),
                y: -30,
                width: 30,
                height: 30,
                speed: 3 + Math.random() * 2,
                color: `hsl(${Math.random() * 360}, 50%, 50%)`
            };
        }
    }

    function checkCollision(rect1, rect2) {
        return rect1.x < rect2.x + rect2.width &&
               rect1.x + rect1.width > rect2.x &&
               rect1.y < rect2.y + rect2.height &&
               rect1.y + rect1.height > rect2.y;
    }

    function endBossFight(won) {
        document.removeEventListener('keydown', handleKeyDown);
        document.removeEventListener('keyup', handleKeyUp);
        document.body.removeChild(gameCanvas);
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –±–æ—Å—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º—É–∑—ã–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        try {
            const bossMusic = document.getElementById('bossMusic');
            const homeMusic = document.getElementById('home');
            if (bossMusic) {
                bossMusic.pause();
                bossMusic.currentTime = 0;
            }
            if (homeMusic) {
                homeMusic.currentTime = 0;
                homeMusic.play();
            }
        } catch(e) {}
        
        if (won) {
            state.bossDefeated = true;
            state.location = 'artifact';
            draw();
        } else {
            alert("–ë–æ—Å—Å –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
            location.reload();
        }
    }

    function bossFightLoop() {
        if (gameOver) {
            endBossFight(boss.health <= 0);
            return;
        }

        // –û—á–∏—Å—Ç–∫–∞ canvas
        gameCtx.clearRect(0, 0, gameCanvas.width, gameCanvas.height);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        if (keys.ArrowLeft && player.x > 0) {
            player.x -= player.speed;
        }
        if (keys.ArrowRight && player.x < gameCanvas.width - player.width) {
            player.x += player.speed;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±–æ—Å—Å–∞
        boss.x += boss.speed * boss.direction;
        if (boss.x <= 0 || boss.x + boss.width >= gameCanvas.width) {
            boss.direction *= -1;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (Math.random() < 0.03) {
            cubes.push(createFallingObject());
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        for (let i = cubes.length - 1; i >= 0; i--) {
            let cube = cubes[i];
            cube.y += cube.speed;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–æ–º
            if (checkCollision(cube, player)) {
                if (cube.type === 'cube') {
                    gameOver = true;
                } else if (cube.type === 'pelmeshka') {
                    boss.health -= 30;
                    cubes.splice(i, 1);
                    score += 30;
                    if (boss.health <= 0) {
                        gameOver = true;
                    }
                    continue;
                }
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –≤—ã—à–µ–¥—à–∏—Ö –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
            if (cube.y > gameCanvas.height) {
                cubes.splice(i, 1);
                continue;
            }

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–∞
            if (cube.type === 'pelmeshka') {
                // –ü–µ–ª—å–º–µ—à–∫–∞: —Ä–∏—Å—É–µ–º –∫—Ä—É–≥ —Å –æ–±–≤–æ–¥–∫–æ–π
                gameCtx.beginPath();
                gameCtx.arc(cube.x + cube.width/2, cube.y + cube.height/2, cube.width/2, 0, 2 * Math.PI);
                gameCtx.fillStyle = cube.color;
                gameCtx.fill();
                gameCtx.strokeStyle = cube.border;
                gameCtx.lineWidth = 3;
                gameCtx.stroke();
            } else {
                // –ö—É–±–∏–∫
                gameCtx.fillStyle = cube.color;
                gameCtx.fillRect(cube.x, cube.y, cube.width, cube.height);
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø—Ä–∞–π—Ç–∞
        gameCtx.drawImage(player.sprite, player.x, player.y, player.width, player.height);

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ—Å—Å–∞
        gameCtx.drawImage(boss.sprite, boss.x, boss.y, boss.width, boss.height);

        // –°–∞–π–¥-–±–∞—Ä HP –±–æ—Å—Å–∞
        let barHeight = 400;
        let barWidth = 30;
        let barX = gameCanvas.width - barWidth - 20;
        let barY = 100;
        // –†–∞–º–∫–∞
        gameCtx.strokeStyle = '#fff';
        gameCtx.lineWidth = 4;
        gameCtx.strokeRect(barX, barY, barWidth, barHeight);
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        let hpPercent = boss.health / boss.maxHealth;
        let filledHeight = barHeight * hpPercent;
        gameCtx.fillStyle = '#ff5555';
        gameCtx.fillRect(barX, barY + (barHeight - filledHeight), barWidth, filledHeight);
        // –¢–µ–∫—Å—Ç HP
        gameCtx.fillStyle = '#fff';
        gameCtx.font = '18px Arial';
        gameCtx.save();
        gameCtx.translate(barX + barWidth/2, barY + barHeight + 30);
        gameCtx.rotate(-Math.PI/2);
        gameCtx.textAlign = 'center';
        gameCtx.fillText(`HP –ë–û–°–°–ê`, 0, 0);
        gameCtx.restore();

        // –°—á—ë—Ç
        gameCtx.fillStyle = '#fff';
        gameCtx.font = '20px Arial';
        gameCtx.fillText(`–°—á—ë—Ç: ${score}`, 10, 60);

        requestAnimationFrame(bossFightLoop);
    }

    // –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–∏–≥—Ä—ã
    bossFightLoop();
}

function openArtifactAltar() {
    const artifactsPool = ["–°–∏–ª–∞ –∫–ª–∏–∫–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ"];
    const randomArtifact = artifactsPool[Math.floor(Math.random() * artifactsPool.length)];

    state.artifacts.push(randomArtifact);

    alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${randomArtifact}`);
    applyArtifactEffect(randomArtifact);
}

function applyArtifactEffect(artifact) {
    switch (artifact) {
        case "–°–∏–ª–∞ –∫–ª–∏–∫–∞":
            state.clickPower += 10;
            break;
        case "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥":
            state.autoIncome += 5;
            break;
        case "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ":
            state.happiness = 100;
            break;
    }
}

function changeLocation(newLocation) {
    const costs = { park: 500, shop: 1000 };
    if (newLocation === 'strange') {
        if (state.hasKey) {
            state.strangeLocationUnlocked = true;
            state.location = 'strange';
            playSound('enterSound');
            alert("–í—ã –≤–æ—à–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é...");
        } else {
            playSound('errorSound');
            alert("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏!");
        }
    } else if (state.location === 'home' && newLocation !== 'home') {
        if (state.coins >= costs[newLocation]) {
            state.coins -= costs[newLocation];
            state.location = newLocation;
            playSound('enterSound');
        } else {
            playSound('errorSound');
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        }
    } else {
        state.location = newLocation;
        playSound('enterSound');
    }
}

function showMenu() {
    const shopModal = document.getElementById('menuModal');
    shopModal.innerHTML = `
        <div>–ú–∞–≥–∞–∑–∏–Ω</div>
        ${state.items.goldenFloppa ? '' : `<button onclick="buyItem('goldenFloppa')">–ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç—É—é –§–ª–æ–ø–ø—É (5000 –º–æ–Ω–µ—Ç)</button><br>`}
        ${state.items.megaClicker ? '' : `<button onclick="buyItem('megaClicker')">–ö—É–ø–∏—Ç—å –ú–µ–≥–∞-–ö–ª–∏–∫–µ—Ä (10000 –º–æ–Ω–µ—Ç)</button><br>`}
        ${state.items.happinessBooster ? '' : `<button onclick="buyItem('happinessBooster')">–ö—É–ø–∏—Ç—å –£—Å–∏–ª–∏—Ç–µ–ª—å –°—á–∞—Å—Ç—å—è (7500 –º–æ–Ω–µ—Ç)</button><br>`}
        ${state.items.maid ? '' : `<button onclick="buyItem('maid')">–ù–∞–Ω—è—Ç—å –≥–æ—Ä–Ω–∏—á–Ω—É—é (50000 –º–æ–Ω–µ—Ç)</button><br>`}
        ${state.items.poorClicker ? '' : `<button onclick="buyItem('poorClicker')">–ö—É–ø–∏—Ç—å –±–µ–¥–Ω—ã–π-–ö–ª–∏–∫–µ—Ä (100 –º–æ–Ω–µ—Ç)</button><br>`}
        <button onclick="buyFood()">–ö—É–ø–∏—Ç—å –µ–¥—É (50 –º–æ–Ω–µ—Ç)</button><br>
        <button onclick="closeMenu()">–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω</button>
    `;
    shopModal.style.display = 'block';
}

function showLocationMenu() {
    const locationModal = document.getElementById('locationModal');
    locationModal.innerHTML = `
        <div>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</div>
        <button onclick="changeLocation('home')">–î–æ–º</button><br>
        <button onclick="changeLocation('park')" ${state.coins < 500 ? 'disabled' : ''}>–ü–∞—Ä–∫ (500 –º–æ–Ω–µ—Ç)</button><br>
        <button onclick="changeLocation('shop')" ${state.coins < 1000 ? 'disabled' : ''}>–ú–∞–≥–∞–∑–∏–Ω (1000 –º–æ–Ω–µ—Ç)</button><br>
        <button onclick="changeLocation('strange')" ${!state.hasKey ? 'disabled' : ''}>
            –°—Ç—Ä–∞–Ω–Ω–∞—è –õ–æ–∫–∞—Ü–∏—è ${!state.hasKey ? '(–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á)' : ''}
        </button><br>
        <button onclick="closeLocationMenu()">–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–π</button>
    `;
    locationModal.style.display = 'block';
}

function closeLocationMenu() {
    document.getElementById('locationModal').style.display = 'none';
}

function changeLocation(newLocation) {
    const costs = { park: 500, shop: 1000 };
    if (newLocation === 'strange') {
        if (state.hasKey) {
            state.strangeLocationUnlocked = true;
            state.location = 'strange';
            playSound('enterSound');
            alert("–í—ã –≤–æ—à–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é...");
            enterStrangeLocation(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        } else {
            playSound('errorSound');
            alert("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏!");
        }
    } else if (state.location === 'home' && newLocation !== 'home') {
        if (state.coins >= costs[newLocation]) {
            state.coins -= costs[newLocation];
            state.location = newLocation;
            playSound('enterSound');
        } else {
            playSound('errorSound');
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
        }
    } else {
        state.location = newLocation;
        playSound('enterSound');
    }
}

function buyItem(itemName) {
    const itemCosts = {
        goldenFloppa: 5000,
        megaClicker: 10000,
        happinessBooster: 7500,
        maid: 50000,
        poorClicker: 100
    };

    if (state.coins >= itemCosts[itemName] && !state.items[itemName]) {
        state.coins -= itemCosts[itemName];
        state.items[itemName] = true;
        playSound('buySound');

        switch (itemName) {
            case 'goldenFloppa':
                state.clickPower += 5;

                break;
            case 'megaClicker':
                state.autoIncome += 5;

                break;
            case 'happinessBooster':
                state.happiness = Math.min(100, state.happiness + 20);

                break;
            case 'maid':

                break;
            case 'poorClicker':
                state.autoIncome += 2;
                break;
        }
        closeMenu();
    } else {
        playSound('errorSound');
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!");
    }
}

function buyFood() {
    if (state.coins >= 50) {
        state.coins -= 50;
        state.hunger = Math.min(100, state.hunger + 25);
        playSound('buySound');
        alert("–®–ª–µ–ø–∞ –Ω–∞–∫–æ—Ä–º–ª–µ–Ω–∞!");
    } else {
        playSound('errorSound');
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
}

function gameLoop() {
    draw();
    
    const now = Date.now();
    const delta = (now - state.lastTick) / 1000;
    
    state.coins += state.autoIncome * (state.happiness / 100) * delta;
    
    if (state.happiness > 0 && Math.random() < 0.005) {
        state.happiness = Math.max(0, state.happiness - 1);
    }
    
    if (!state.items.maid) {
        if (state.hunger > 0) {
            state.hunger = Math.max(0, state.hunger - 0.05 * delta);
        } else {
            alert("–®–ª–µ–ø–∞ —É–º–µ—Ä–ª–∞ –æ—Ç –≥–æ–ª–æ–¥–∞! –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.");
            location.reload();
        }
    }
    playSound("home")
    state.lastTick = now;
    updateUI();
    requestAnimationFrame(gameLoop);
}

canvas.addEventListener('click', (e) => {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (x > canvas.width/2 - 75 && x < canvas.width/2 + 75 &&
        y > canvas.height/2 - 75 && y < canvas.height/2 + 75) {
        state.coins += state.clickPower * (state.happiness / 100);
        state.happiness = Math.min(100, state.happiness + 5);
        state.floppaState = 'happy';
        playSound("clickfloppa")

        // Key drop logic
        if (!state.hasKey && Math.random() < 0.01) { // 0.01% chance
            state.hasKey = true;
            alert("–í—ã –Ω–∞—à–ª–∏ —Ä–µ–¥–∫–∏–π –∫–ª—é—á! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.");
        }

        setTimeout(() => state.floppaState = 'idle', 500);
    }

    if (state.location === 'artifact') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        for (let i = 0; i < 3; i++) {
            let bx = canvas.width/2 - 250 + i*200;
            let by = 200;
            if (x > bx && x < bx+150 && y > by && y < by+150) {
                if (Math.random() < 0.5) {
                    const artifactsPool = ["–°–∏–ª–∞ –∫–ª–∏–∫–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ"];
                    const artifact = artifactsPool[i];
                    if (!state.artifacts.includes(artifact)) {
                        state.artifacts.push(artifact);
                        applyArtifactEffect(artifact);
                        alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${artifact}`);
                    } else {
                        alert('–≠—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å!');
                    }
                } else {
                    alert('–ù–µ –ø–æ–≤–µ–∑–ª–æ! –í–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–º–æ–π.');
                }
                state.location = 'home';
                draw();
                return;
            }
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–∞–±–ª–∏—á–∫—É –¥–æ–º–æ–π
        let bx = canvas.width/2 - 75;
        let by = 400;
        if (x > bx && x < bx+150 && y > by && y < by+80) {
            state.location = 'home';
            draw();
            return;
        }
    }
});

function closeMenu() {
    const shopModal = document.getElementById('menuModal');
    if (shopModal) shopModal.style.display = 'none';
}

updateUI();
gameLoop();
